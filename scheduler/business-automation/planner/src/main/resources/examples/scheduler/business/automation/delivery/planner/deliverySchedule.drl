package examples.scheduler.business.automation.delivery.planner;

import examples.scheduler.business.automation.delivery.planner.domain.DeliveryRole;
import examples.scheduler.business.automation.delivery.planner.domain.DeliveryAssignment;
import examples.scheduler.business.automation.delivery.planner.domain.crew.CrewMember;
import examples.scheduler.business.automation.delivery.planner.domain.crew.CrewMemberAvailability;
import examples.scheduler.business.automation.delivery.planner.domain.crew.CrewMemberAvailabilityState;

import examples.scheduler.business.automation.delivery.planner.DateTimeUtils;

import org.optaplanner.core.api.score.buildin.hardmediumsoft.HardMediumSoftScoreHolder;

global HardMediumSoftScoreHolder scoreHolder;

dialect "mvel"

// ############################################################################
// Hard constraints
// ############################################################################

rule "Required Skill for a Delivery Assignment"
    when
        DeliveryRole(
            $roleId: id != null,
            $requiredSkillCodeSet : requiredSkillCodeSet != null
        )
        DeliveryAssignment(
            deliveryRoleId == $roleId,
            crewMember != null && !crewMember.hasSkills($requiredSkillCodeSet)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -100);
end

rule "Crew Member cannot Act as Multiple Roles For Same Delivery"
    when
        DeliveryAssignment(
            $sId : scheduleId,
            $drId : deliveryRoleId,
            $crewMember : crewMember != null
        )
        DeliveryAssignment(
            scheduleId == $sId,
            deliveryRoleId != $drId,
            crewMember == $crewMember
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -80);
end

rule "Crew Member Unavailable for Delivery Assignment"
    when
        CrewMemberAvailability(
            state == CrewMemberAvailabilityState.UNAVAILABLE,
            $crewMemberId : crewMemberId,
            $startDateTime : startDateTime,
            $endDateTime : endDateTime
        )
        DeliveryAssignment(
            crewMember != null && crewMember.id == $crewMemberId,
            DateTimeUtils.doTimeslotsIntersect($startDateTime,$endDateTime,
                                                startDateTime, endDateTime)
        )
    then
        scoreHolder.addHardConstraintMatch(kcontext, -50);
end

// ############################################################################
// Medium constraints
// ############################################################################

rule "Assign every Delivery Assignment"
    when
        DeliveryAssignment(crewMember == null)
    then
        scoreHolder.addMediumConstraintMatch(kcontext, -1);
end
